from __future__ import annotations

import re
from pathlib import Path

import typer

app = typer.Typer(help="CLI for scaffolding sibling projects using common_config")


def _sanitize_package_name(name: str) -> str:
    pkg = name.strip().lower().replace("-", "_").replace(" ", "_")
    pkg = re.sub(r"[^a-z0-9_]", "", pkg)
    if not re.match(r"^[a-z_]", pkg):
        pkg = f"proj_{pkg}"
    return pkg


def _write(path: Path, content: str) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")


@app.command()
def init(
    project_name: str = typer.Argument(..., help="Name of the new project folder"),
    dir: Path | None = typer.Option(None, "--dir", "-d", help="Directory to create the project in (default: CWD)"),
    package: str | None = typer.Option(
        None, "--package", "-p", help="Python package name (default: derived from project name)"
    ),
    force: bool = typer.Option(False, "--force", help="Overwrite existing files if the folder exists"),
):
    """Create a new sibling project with standardized repository structure.
    
    NOTE: Uses centralized data/, logs/, and artifacts/ at repository root.
    No per-project config/ directory - use shared_config/.env instead.
    """
    root = dir or Path.cwd()
    target = root / project_name

    if target.exists() and any(target.iterdir()) and not force:
        typer.echo(f"Folder already exists and not empty: {target}. Use --force to proceed.")
        raise typer.Exit(code=1)

    pkg = _sanitize_package_name(package or project_name)

    # Files content
    pyproject = "[tool.black]\nline-length = 120\n\n[tool.ruff]\nline-length = 120\n"
    gitignore = (
        "# Python\n"
        "__pycache__/\n"
        "*.pyc\n"
        "*.pyo\n"
        "\n"
        "# Project-specific temporary files\n"
        "temp/\n"
        "*.tmp\n"
        "*.bak\n"
        "\n"
        "# Note: .venv/, data/, logs/, artifacts/ are gitignored at repository root\n"
    )
    readme = (
        f"# {project_name}\n\n"
        f"Generated by common_config scaffolder.\n\n"
        f"## Structure\n\n"
        f"This project follows the repository standardization:\n\n"
        f"- **Config**: Use `shared_config/.env` at repository root (no per-project config/)\n"
        f"- **Data**: Inputs/outputs go to `data/input/{project_name}/` and `data/output/{project_name}/`\n"
        f"- **Logs**: Log files go to `logs/{project_name}/`\n"
        f"- **Artifacts**: Build outputs (pytest cache, coverage) go to `artifacts/`\n"
        f"- **Archive**: Historical files go to `archive/projects/{project_name}/`\n"
        f"- **Scripts**: Utility scripts for index creation, migrations, etc. in `scripts/`\n"
        f"- **IDE Settings**: Use `.vscode/settings.json` at repository root\n\n"
        f"## Running\n\n"
        f"```bash\n"
        f"# Activate shared virtual environment\n"
        f"source ../.venv311/Scripts/activate  # or .venv311\\Scripts\\activate on Windows\n\n"
        f"# Run the project\n"
        f"python run.py\n"
        f"```\n\n"
        f"## Testing\n\n"
        f"```bash\n"
        f"# Run tests\n"
        f"pytest tests/ -v\n\n"
        f"# With coverage\n"
        f"pytest tests/ --cov={pkg}\n"
        f"```\n\n"
        f"See `docs/TESTING_GUIDE.md` at repository root for more details.\n"
    )
    run_py = (
        f'"""Main entry point for {project_name}."""\n'
        "import sys\n"
        "from pathlib import Path\n\n"
        "# Add src/ to path so we can import project modules\n"
        'sys.path.insert(0, str(Path(__file__).parent / "src"))\n\n'
        "from common_config.utils.logger import setup_logging, get_logger, get_run_timestamp\n"
        "from common_config.config.settings import get_settings\n\n\n"
        "def main():\n"
        '    """Main execution function."""\n'
        "    settings = get_settings()\n"
        f'    log_dir = Path(settings.paths.logs) / "{project_name}"\n'
        "    log_dir.mkdir(parents=True, exist_ok=True)\n"
        "    setup_logging(log_dir=log_dir)\n"
        "    logger = get_logger(__name__)\n\n"
        '    logger.info("=" * 60)\n'
        f'    logger.info("{project_name} - Starting")\n'
        '    logger.info("=" * 60)\n\n'
        "    # TODO: Add your project logic here\n"
        f'    logger.info(f"Output dir: {{settings.paths.data_output}}/{project_name}/")\n\n'
        '    logger.info("Completed successfully")\n\n\n'
        'if __name__ == "__main__":\n'
        "    main()\n"
    )
    run_bat = (
        "@echo off\r\n"
        "setlocal\r\n"
        "cd /d %~dp0\r\n"
        "REM Use shared virtual environment\r\n"
        'call "..\\.\\.venv311\\Scripts\\activate.bat"\r\n'
        "python run.py %*\r\n"
    )
    test_smoke = (
        f'"""Smoke tests for {project_name}."""\n'
        "import sys\n"
        "from pathlib import Path\n\n\n"
        "class TestImports:\n"
        '    """Test that all critical modules can be imported."""\n\n'
        "    def test_import_run_module(self):\n"
        '        """Test that run.py can be imported."""\n'
        f'        sys.path.insert(0, str(Path("{project_name}").absolute()))\n'
        "        import run\n\n"
        "        assert hasattr(run, \"main\")\n\n\n"
        "class TestDependencies:\n"
        '    """Test that required dependencies are installed."""\n\n'
        "    def test_common_config_available(self):\n"
        '        """Test that common_config package is available."""\n'
        "        import common_config\n\n"
        "        assert common_config is not None\n\n\n"
        "class TestProjectStructure:\n"
        '    """Test project directory structure."""\n\n'
        "    def test_readme_exists(self):\n"
        '        """Test that README.md exists."""\n'
        f'        readme = Path("{project_name}/README.md")\n'
        "        assert readme.exists()\n\n"
        "    def test_run_script_exists(self):\n"
        '        """Test that run.py exists."""\n'
        f'        run = Path("{project_name}/run.py")\n'
        "        assert run.exists()\n\n"
        "    def test_src_directory_exists(self):\n"
        '        """Test that src/ directory exists."""\n'
        f'        src = Path("{project_name}/src")\n'
        "        assert src.exists()\n"
        "        assert src.is_dir()\n"
    )

    # Create structure (minimal - use centralized directories at repo root)
    (target / "src" / pkg).mkdir(parents=True, exist_ok=True)
    (target / "tests").mkdir(parents=True, exist_ok=True)
    (target / "scripts").mkdir(parents=True, exist_ok=True)
    (target / "temp").mkdir(parents=True, exist_ok=True)

    # Write files
    _write(target / "pyproject.toml", pyproject)
    _write(target / ".gitignore", gitignore)
    _write(target / "README.md", readme)
    _write(target / "run.py", run_py)
    _write(target / "run.bat", run_bat)
    _write(target / "tests" / "__init__.py", f'"""Tests for {project_name}."""\n')
    _write(target / "tests" / f"test_{pkg}_smoke.py", test_smoke)
    _write(target / "src" / pkg / "__init__.py", "")
    _write(target / "scripts" / "README.md", f"# Scripts for {project_name}\n\nMiscellaneous utility scripts for maintenance tasks:\n\n- Index creation/management\n- Data migrations\n- One-time operations\n- Database maintenance\n")
    _write(target / "temp" / ".gitkeep", "")

    # Ensure centralized directories exist at repository root
    repo_root = root if (root / "shared_config").exists() else root.parent
    for subdir in [f"data/input/{project_name}", f"data/output/{project_name}", f"logs/{project_name}"]:
        (repo_root / subdir).mkdir(parents=True, exist_ok=True)

    typer.echo(f"‚úÖ Project created at: {target}")
    typer.echo("")
    typer.echo("üìÅ Structure:")
    typer.echo(f"   {project_name}/")
    typer.echo("   ‚îú‚îÄ‚îÄ src/")
    typer.echo("   ‚îú‚îÄ‚îÄ tests/")
    typer.echo("   ‚îú‚îÄ‚îÄ scripts/     (index creation, migrations, etc.)")
    typer.echo("   ‚îú‚îÄ‚îÄ temp/")
    typer.echo("   ‚îú‚îÄ‚îÄ run.py")
    typer.echo("   ‚îú‚îÄ‚îÄ run.bat")
    typer.echo("   ‚îú‚îÄ‚îÄ .gitignore")
    typer.echo("   ‚îî‚îÄ‚îÄ README.md")
    typer.echo("")
    typer.echo("üìÅ Centralized directories created:")
    typer.echo(f"   data/input/{project_name}/")
    typer.echo(f"   data/output/{project_name}/")
    typer.echo(f"   logs/{project_name}/")
    typer.echo("")
    typer.echo("‚ÑπÔ∏è  Uses repository-level settings:")
    typer.echo("   - .vscode/settings.json (at repo root)")
    typer.echo("   - shared_config/.env")
    typer.echo("   - .venv311/ (shared virtual environment)")
    typer.echo("")
    typer.echo("Next steps:")
    typer.echo("  1) Verify common_config is installed (only needed once):")
    typer.echo("     clear && pip show common-config")
    typer.echo("     If not found, install: pip install -e common_config")
    typer.echo("")
    typer.echo("  2) Run code quality checks (lint, format, type check):")
    typer.echo(f"     clear && ./lint.sh {project_name}/")
    typer.echo("")
    typer.echo("  3) Run tests:")
    typer.echo(f"     clear && pytest {project_name}/tests/ -v")
    typer.echo("")
    typer.echo("  4) Run project:")
    typer.echo(f"     clear && python {project_name}/run.py")
    typer.echo("")
    typer.echo("  5) If database connection needed, verify shared_config/.env has:")
    typer.echo("     MONGODB_URI_<ENV> and DATABASE_NAME_<ENV>")
